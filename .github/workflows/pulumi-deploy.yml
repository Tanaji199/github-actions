name: Pulumi AWS Infra Deploy

on:
  push:
    branches:
      - master   # Trigger workflow only on master branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Install Pulumi CLI
      - name: Install Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: 'latest'
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      # 5. Select or create Pulumi stack
      - name: Select Pulumi stack
        run: |
          if ! pulumi stack select dev; then
            pulumi stack init dev
          fi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      # 6. Pulumi Preview
      - name: Pulumi Preview
        run: pulumi preview
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}

      # 7. Pulumi Up (Deploy)
      - name: Pulumi Up (Deploy)
        if: github.ref == 'refs/heads/master'
        run: pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}





# --- Existing resources ---
# (VPC, S3, etc.)
# ...

# --- New EC2 instance ---
import pulumi_aws as aws

sec_group = aws.ec2.SecurityGroup(
    "automatedserver-sg",
    description="Allow SSH inbound traffic",
    ingress=[{
        "protocol": "tcp",
        "from_port": 22,
        "to_port": 22,
        "cidr_blocks": ["0.0.0.0/0"],
    }],
    egress=[{
        "protocol": "-1",
        "from_port": 0,
        "to_port": 0,
        "cidr_blocks": ["0.0.0.0/0"],
    }]
)

server = aws.ec2.Instance(
    "automatedserver",
    instance_type="t2.micro",
    ami="ami-0c02fb55956c7d316",
    vpc_security_group_ids=[sec_group.id],
    tags={"Name": "automatedserver"}
)

pulumi.export("automatedserver_public_ip", server.public_ip)
pulumi.export("automatedserver_id", server.id)
